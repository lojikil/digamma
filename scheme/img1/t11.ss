(load "./prelude.ss")
(define-macro with (var val :body b)
	(list (cons fn (cons (cons var '()) b)) val))
(def foreach-proc (fn (proc col)
	(if (empty? col)
		#v	
		(begin 
			(proc (first col))
			(foreach-proc proc (rest col))))))
(def step-range (fn (start end step)
	;(display (format "Within step-range~%"))
	(if (> start end)
		'()
		(cons start (step-range (+ start step) end step)))))
(def draw-x-axis (fn (i x y x-max y-size)
	(display (format "test: ~a ~a ~a ~a~%" x y x-max y-size))
	(if (>= x x-max)
		#t
		(begin
			(cset! i (+ x (* y x-max)) 1)
			(draw-x-axis i (+ x 1) y x-max y-size)))))
(def draw-y-axis (fn (i x y x-max y-size)
	(if (>= y y-size)
		#t
		(begin
			(cset! i (+ x (* y x-max)) 1)
			(draw-y-axis i x (+ y 1) x-max y-size)))))
(def plot-fixed (fn (i x y x-size y-size)
	(display (format "plot-fixed x: ~a, y: ~a~%" (truncate x) (truncate y)))
	(if (or (< x 0) (>= x x-size) (< y 0) (>= y y-size))
		#f
		(cset! i (+ (truncate x) (* (truncate y) x-size)) 1))))
(def plot-fixed-line (fn (i x0 y0 x1 y1 x-size y-size)
	;(display (format "Made it to plot-fixed-line(in t0m) ~%"))
	(if (= x0 x1)
		(foreach-proc (fn (y) (plot-fixed i x0 y x-size y-size)) (step-range y0 y1 1))
		((fn (m) 
			(display (format "Made it to inside with...~%"))
			(foreach-proc (fn (x) (plot-fixed i x (+ (* m (- x x1)) y1) x-size y-size)) (step-range x0 x1 (if (<= x0 x1) 1 -1))) (/ (- y1 y0) (- x1 x0))))))
(def plot-fixed-circle (fn (i x0 y0 r x-size y-size)
	'()))
(def plot-fixed-rectangle (fn (i x0 y0 w h x-size y-size)
	(plot-fixed-line i x0 y0 (+ x0 w) y0 x-size y-size)
	(plot-fixed-line i (+ x0 w) y0 (+ x0 w) (+ y0 h) x-size y-size) ; working...
	(plot-fixed-line i x0 (+ y0 h) (+ x0 w) (+ y0 h) x-size y-size)
	(plot-fixed-line i x0 y0 x0 (+ y0 h) x-size y-size)))
; points is a vector or list of lists (x y) 
; this draws lines between (x[n], y[n]) -> (x[n + 1], y[n + 1])
(def plot-fixed-polygon (fn (i points x-size y-size)
	'()))
(def img (make-vector (* 300 600) 0))
;(draw-y-axis img 150 0 600)
;(draw-x-axis img 0 300 300 600)
;(draw-x-axis img 0 300 300 600)
(display (length img))
(newline)
(plot-fixed-line img 10 10 300 290 300 600)
(plot-fixed-line img 1 1 300 600 300 600)
(plot-fixed-line img 0 600 300 0 300 600)
(plot-fixed-rectangle img 120 120 50 50 300 600)
(plot-fixed-rectangle img 50 50 10 20 300 600)
(def fil (open "test11.pnm" :write))
(display (format "P1~%300 600~%~a" img) fil)
(close fil)